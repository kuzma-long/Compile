Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> if
Rule 8     statement -> while
Rule 9     statement -> function
Rule 10    statement -> runfunction
Rule 11    statement -> return
Rule 12    assignment -> VARIABLE = VARIABLE
Rule 13    assignment -> VARIABLE = [ numbers ]
Rule 14    assignment -> VARIABLE = VARIABLE [ VARIABLE ]
Rule 15    assignment -> VARIABLE [ VARIABLE ] = VARIABLE
Rule 16    assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
Rule 17    numbers -> numbers , NUMBER
Rule 18    numbers -> NUMBER
Rule 19    operation -> VARIABLE PLUSEQUAL NUMBER
Rule 20    operation -> VARIABLE MINEQUAL NUMBER
Rule 21    expression -> expression + term
Rule 22    expression -> expression - term
Rule 23    expression -> term
Rule 24    term -> term * factor
Rule 25    term -> term / factor
Rule 26    term -> factor
Rule 27    factor -> VARIABLE
Rule 28    factor -> ( expression )
Rule 29    factor -> NUMBER
Rule 30    factor -> LEN ( VARIABLE )
Rule 31    print -> PRINT ( VARIABLE )
Rule 32    if -> IF ( condition ) { statements }
Rule 33    function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
Rule 34    runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression )
Rule 35    runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE )
Rule 36    runfunction -> VARIABLE ( VARIABLE , NUMBER , expression )
Rule 37    return -> RETURN
Rule 38    condition -> VARIABLE MORE VARIABLE
Rule 39    condition -> VARIABLE < VARIABLE
Rule 40    condition -> VARIABLE [ VARIABLE ] > VARIABLE
Rule 41    condition -> VARIABLE [ VARIABLE ] LESS VARIABLE
Rule 42    while -> WHILE ( condition ) { statements }
Rule 43    while -> WHILE ( condition AND condition ) { statements }

Terminals, with rules where they appear

(                    : 28 30 31 32 33 34 35 36 42 43
)                    : 28 30 31 32 33 34 35 36 42 43
*                    : 24
+                    : 21
,                    : 17 33 33 34 34 35 35 36 36
-                    : 22
/                    : 25
<                    : 39
=                    : 12 13 14 15 16
>                    : 40
AND                  : 43
DEF                  : 33
IF                   : 32
LEN                  : 30
LESS                 : 41
MINEQUAL             : 20
MORE                 : 38
NUMBER               : 17 18 19 20 29 36
PLUSEQUAL            : 19
PRINT                : 31
RETURN               : 37
VARIABLE             : 12 12 13 14 14 14 15 15 15 16 16 16 16 19 20 27 30 31 33 33 33 33 34 34 34 35 35 35 36 36 38 38 39 39 40 40 40 41 41 41
WHILE                : 42 43
[                    : 13 14 15 16 16 40 41
]                    : 13 14 15 16 16 40 41
error                : 
{                    : 32 33 42 43
}                    : 32 33 42 43

Nonterminals, with rules where they appear

assignment           : 4
condition            : 32 42 43 43
expression           : 21 22 28 34 35 36
factor               : 24 25 26
function             : 9
if                   : 7
numbers              : 13 17
operation            : 5
print                : 6
program              : 0
return               : 11
runfunction          : 10
statement            : 2 3
statements           : 1 2 32 33 42 43
term                 : 21 22 23 24 25
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statement                      shift and go to state 18
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    DEF             reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    DEF             reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    IF              reduce using rule 5 (statement -> operation .)
    WHILE           reduce using rule 5 (statement -> operation .)
    DEF             reduce using rule 5 (statement -> operation .)
    RETURN          reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)
    }               reduce using rule 5 (statement -> operation .)


state 6

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    IF              reduce using rule 6 (statement -> print .)
    WHILE           reduce using rule 6 (statement -> print .)
    DEF             reduce using rule 6 (statement -> print .)
    RETURN          reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)
    }               reduce using rule 6 (statement -> print .)


state 7

    (7) statement -> if .

    VARIABLE        reduce using rule 7 (statement -> if .)
    PRINT           reduce using rule 7 (statement -> if .)
    IF              reduce using rule 7 (statement -> if .)
    WHILE           reduce using rule 7 (statement -> if .)
    DEF             reduce using rule 7 (statement -> if .)
    RETURN          reduce using rule 7 (statement -> if .)
    $end            reduce using rule 7 (statement -> if .)
    }               reduce using rule 7 (statement -> if .)


state 8

    (8) statement -> while .

    VARIABLE        reduce using rule 8 (statement -> while .)
    PRINT           reduce using rule 8 (statement -> while .)
    IF              reduce using rule 8 (statement -> while .)
    WHILE           reduce using rule 8 (statement -> while .)
    DEF             reduce using rule 8 (statement -> while .)
    RETURN          reduce using rule 8 (statement -> while .)
    $end            reduce using rule 8 (statement -> while .)
    }               reduce using rule 8 (statement -> while .)


state 9

    (9) statement -> function .

    VARIABLE        reduce using rule 9 (statement -> function .)
    PRINT           reduce using rule 9 (statement -> function .)
    IF              reduce using rule 9 (statement -> function .)
    WHILE           reduce using rule 9 (statement -> function .)
    DEF             reduce using rule 9 (statement -> function .)
    RETURN          reduce using rule 9 (statement -> function .)
    $end            reduce using rule 9 (statement -> function .)
    }               reduce using rule 9 (statement -> function .)


state 10

    (10) statement -> runfunction .

    VARIABLE        reduce using rule 10 (statement -> runfunction .)
    PRINT           reduce using rule 10 (statement -> runfunction .)
    IF              reduce using rule 10 (statement -> runfunction .)
    WHILE           reduce using rule 10 (statement -> runfunction .)
    DEF             reduce using rule 10 (statement -> runfunction .)
    RETURN          reduce using rule 10 (statement -> runfunction .)
    $end            reduce using rule 10 (statement -> runfunction .)
    }               reduce using rule 10 (statement -> runfunction .)


state 11

    (11) statement -> return .

    VARIABLE        reduce using rule 11 (statement -> return .)
    PRINT           reduce using rule 11 (statement -> return .)
    IF              reduce using rule 11 (statement -> return .)
    WHILE           reduce using rule 11 (statement -> return .)
    DEF             reduce using rule 11 (statement -> return .)
    RETURN          reduce using rule 11 (statement -> return .)
    $end            reduce using rule 11 (statement -> return .)
    }               reduce using rule 11 (statement -> return .)


state 12

    (12) assignment -> VARIABLE . = VARIABLE
    (13) assignment -> VARIABLE . = [ numbers ]
    (14) assignment -> VARIABLE . = VARIABLE [ VARIABLE ]
    (15) assignment -> VARIABLE . [ VARIABLE ] = VARIABLE
    (16) assignment -> VARIABLE . [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> VARIABLE . PLUSEQUAL NUMBER
    (20) operation -> VARIABLE . MINEQUAL NUMBER
    (34) runfunction -> VARIABLE . ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> VARIABLE . ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> VARIABLE . ( VARIABLE , NUMBER , expression )

    =               shift and go to state 19
    [               shift and go to state 20
    PLUSEQUAL       shift and go to state 21
    MINEQUAL        shift and go to state 22
    (               shift and go to state 23


state 13

    (31) print -> PRINT . ( VARIABLE )

    (               shift and go to state 24


state 14

    (32) if -> IF . ( condition ) { statements }

    (               shift and go to state 25


state 15

    (42) while -> WHILE . ( condition ) { statements }
    (43) while -> WHILE . ( condition AND condition ) { statements }

    (               shift and go to state 26


state 16

    (33) function -> DEF . VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }

    VARIABLE        shift and go to state 27


state 17

    (37) return -> RETURN .

    VARIABLE        reduce using rule 37 (return -> RETURN .)
    PRINT           reduce using rule 37 (return -> RETURN .)
    IF              reduce using rule 37 (return -> RETURN .)
    WHILE           reduce using rule 37 (return -> RETURN .)
    DEF             reduce using rule 37 (return -> RETURN .)
    RETURN          reduce using rule 37 (return -> RETURN .)
    $end            reduce using rule 37 (return -> RETURN .)
    }               reduce using rule 37 (return -> RETURN .)


state 18

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    DEF             reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 19

    (12) assignment -> VARIABLE = . VARIABLE
    (13) assignment -> VARIABLE = . [ numbers ]
    (14) assignment -> VARIABLE = . VARIABLE [ VARIABLE ]

    VARIABLE        shift and go to state 28
    [               shift and go to state 29


state 20

    (15) assignment -> VARIABLE [ . VARIABLE ] = VARIABLE
    (16) assignment -> VARIABLE [ . VARIABLE ] = VARIABLE [ VARIABLE ]

    VARIABLE        shift and go to state 30


state 21

    (19) operation -> VARIABLE PLUSEQUAL . NUMBER

    NUMBER          shift and go to state 31


state 22

    (20) operation -> VARIABLE MINEQUAL . NUMBER

    NUMBER          shift and go to state 32


state 23

    (34) runfunction -> VARIABLE ( . VARIABLE , VARIABLE , expression )
    (35) runfunction -> VARIABLE ( . VARIABLE , expression , VARIABLE )
    (36) runfunction -> VARIABLE ( . VARIABLE , NUMBER , expression )

    VARIABLE        shift and go to state 33


state 24

    (31) print -> PRINT ( . VARIABLE )

    VARIABLE        shift and go to state 34


state 25

    (32) if -> IF ( . condition ) { statements }
    (38) condition -> . VARIABLE MORE VARIABLE
    (39) condition -> . VARIABLE < VARIABLE
    (40) condition -> . VARIABLE [ VARIABLE ] > VARIABLE
    (41) condition -> . VARIABLE [ VARIABLE ] LESS VARIABLE

    VARIABLE        shift and go to state 36

    condition                      shift and go to state 35

state 26

    (42) while -> WHILE ( . condition ) { statements }
    (43) while -> WHILE ( . condition AND condition ) { statements }
    (38) condition -> . VARIABLE MORE VARIABLE
    (39) condition -> . VARIABLE < VARIABLE
    (40) condition -> . VARIABLE [ VARIABLE ] > VARIABLE
    (41) condition -> . VARIABLE [ VARIABLE ] LESS VARIABLE

    VARIABLE        shift and go to state 36

    condition                      shift and go to state 37

state 27

    (33) function -> DEF VARIABLE . ( VARIABLE , VARIABLE , VARIABLE ) { statements }

    (               shift and go to state 38


state 28

    (12) assignment -> VARIABLE = VARIABLE .
    (14) assignment -> VARIABLE = VARIABLE . [ VARIABLE ]

    VARIABLE        reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    PRINT           reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    IF              reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    WHILE           reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    DEF             reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    RETURN          reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    $end            reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    }               reduce using rule 12 (assignment -> VARIABLE = VARIABLE .)
    [               shift and go to state 39


state 29

    (13) assignment -> VARIABLE = [ . numbers ]
    (17) numbers -> . numbers , NUMBER
    (18) numbers -> . NUMBER

    NUMBER          shift and go to state 41

    numbers                        shift and go to state 40

state 30

    (15) assignment -> VARIABLE [ VARIABLE . ] = VARIABLE
    (16) assignment -> VARIABLE [ VARIABLE . ] = VARIABLE [ VARIABLE ]

    ]               shift and go to state 42


state 31

    (19) operation -> VARIABLE PLUSEQUAL NUMBER .

    VARIABLE        reduce using rule 19 (operation -> VARIABLE PLUSEQUAL NUMBER .)
    PRINT           reduce using rule 19 (operation -> VARIABLE PLUSEQUAL NUMBER .)
    IF              reduce using rule 19 (operation -> VARIABLE PLUSEQUAL NUMBER .)
    WHILE           reduce using rule 19 (operation -> VARIABLE PLUSEQUAL NUMBER .)
    DEF             reduce using rule 19 (operation -> VARIABLE PLUSEQUAL NUMBER .)
    RETURN          reduce using rule 19 (operation -> VARIABLE PLUSEQUAL NUMBER .)
    $end            reduce using rule 19 (operation -> VARIABLE PLUSEQUAL NUMBER .)
    }               reduce using rule 19 (operation -> VARIABLE PLUSEQUAL NUMBER .)


state 32

    (20) operation -> VARIABLE MINEQUAL NUMBER .

    VARIABLE        reduce using rule 20 (operation -> VARIABLE MINEQUAL NUMBER .)
    PRINT           reduce using rule 20 (operation -> VARIABLE MINEQUAL NUMBER .)
    IF              reduce using rule 20 (operation -> VARIABLE MINEQUAL NUMBER .)
    WHILE           reduce using rule 20 (operation -> VARIABLE MINEQUAL NUMBER .)
    DEF             reduce using rule 20 (operation -> VARIABLE MINEQUAL NUMBER .)
    RETURN          reduce using rule 20 (operation -> VARIABLE MINEQUAL NUMBER .)
    $end            reduce using rule 20 (operation -> VARIABLE MINEQUAL NUMBER .)
    }               reduce using rule 20 (operation -> VARIABLE MINEQUAL NUMBER .)


state 33

    (34) runfunction -> VARIABLE ( VARIABLE . , VARIABLE , expression )
    (35) runfunction -> VARIABLE ( VARIABLE . , expression , VARIABLE )
    (36) runfunction -> VARIABLE ( VARIABLE . , NUMBER , expression )

    ,               shift and go to state 43


state 34

    (31) print -> PRINT ( VARIABLE . )

    )               shift and go to state 44


state 35

    (32) if -> IF ( condition . ) { statements }

    )               shift and go to state 45


state 36

    (38) condition -> VARIABLE . MORE VARIABLE
    (39) condition -> VARIABLE . < VARIABLE
    (40) condition -> VARIABLE . [ VARIABLE ] > VARIABLE
    (41) condition -> VARIABLE . [ VARIABLE ] LESS VARIABLE

    MORE            shift and go to state 46
    <               shift and go to state 47
    [               shift and go to state 48


state 37

    (42) while -> WHILE ( condition . ) { statements }
    (43) while -> WHILE ( condition . AND condition ) { statements }

    )               shift and go to state 49
    AND             shift and go to state 50


state 38

    (33) function -> DEF VARIABLE ( . VARIABLE , VARIABLE , VARIABLE ) { statements }

    VARIABLE        shift and go to state 51


state 39

    (14) assignment -> VARIABLE = VARIABLE [ . VARIABLE ]

    VARIABLE        shift and go to state 52


state 40

    (13) assignment -> VARIABLE = [ numbers . ]
    (17) numbers -> numbers . , NUMBER

    ]               shift and go to state 53
    ,               shift and go to state 54


state 41

    (18) numbers -> NUMBER .

    ]               reduce using rule 18 (numbers -> NUMBER .)
    ,               reduce using rule 18 (numbers -> NUMBER .)


state 42

    (15) assignment -> VARIABLE [ VARIABLE ] . = VARIABLE
    (16) assignment -> VARIABLE [ VARIABLE ] . = VARIABLE [ VARIABLE ]

    =               shift and go to state 55


state 43

    (34) runfunction -> VARIABLE ( VARIABLE , . VARIABLE , expression )
    (35) runfunction -> VARIABLE ( VARIABLE , . expression , VARIABLE )
    (36) runfunction -> VARIABLE ( VARIABLE , . NUMBER , expression )
    (21) expression -> . expression + term
    (22) expression -> . expression - term
    (23) expression -> . term
    (24) term -> . term * factor
    (25) term -> . term / factor
    (26) term -> . factor
    (27) factor -> . VARIABLE
    (28) factor -> . ( expression )
    (29) factor -> . NUMBER
    (30) factor -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 56
    NUMBER          shift and go to state 59
    (               shift and go to state 57
    LEN             shift and go to state 62

    expression                     shift and go to state 58
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 44

    (31) print -> PRINT ( VARIABLE ) .

    VARIABLE        reduce using rule 31 (print -> PRINT ( VARIABLE ) .)
    PRINT           reduce using rule 31 (print -> PRINT ( VARIABLE ) .)
    IF              reduce using rule 31 (print -> PRINT ( VARIABLE ) .)
    WHILE           reduce using rule 31 (print -> PRINT ( VARIABLE ) .)
    DEF             reduce using rule 31 (print -> PRINT ( VARIABLE ) .)
    RETURN          reduce using rule 31 (print -> PRINT ( VARIABLE ) .)
    $end            reduce using rule 31 (print -> PRINT ( VARIABLE ) .)
    }               reduce using rule 31 (print -> PRINT ( VARIABLE ) .)


state 45

    (32) if -> IF ( condition ) . { statements }

    {               shift and go to state 63


state 46

    (38) condition -> VARIABLE MORE . VARIABLE

    VARIABLE        shift and go to state 64


state 47

    (39) condition -> VARIABLE < . VARIABLE

    VARIABLE        shift and go to state 65


state 48

    (40) condition -> VARIABLE [ . VARIABLE ] > VARIABLE
    (41) condition -> VARIABLE [ . VARIABLE ] LESS VARIABLE

    VARIABLE        shift and go to state 66


state 49

    (42) while -> WHILE ( condition ) . { statements }

    {               shift and go to state 67


state 50

    (43) while -> WHILE ( condition AND . condition ) { statements }
    (38) condition -> . VARIABLE MORE VARIABLE
    (39) condition -> . VARIABLE < VARIABLE
    (40) condition -> . VARIABLE [ VARIABLE ] > VARIABLE
    (41) condition -> . VARIABLE [ VARIABLE ] LESS VARIABLE

    VARIABLE        shift and go to state 36

    condition                      shift and go to state 68

state 51

    (33) function -> DEF VARIABLE ( VARIABLE . , VARIABLE , VARIABLE ) { statements }

    ,               shift and go to state 69


state 52

    (14) assignment -> VARIABLE = VARIABLE [ VARIABLE . ]

    ]               shift and go to state 70


state 53

    (13) assignment -> VARIABLE = [ numbers ] .

    VARIABLE        reduce using rule 13 (assignment -> VARIABLE = [ numbers ] .)
    PRINT           reduce using rule 13 (assignment -> VARIABLE = [ numbers ] .)
    IF              reduce using rule 13 (assignment -> VARIABLE = [ numbers ] .)
    WHILE           reduce using rule 13 (assignment -> VARIABLE = [ numbers ] .)
    DEF             reduce using rule 13 (assignment -> VARIABLE = [ numbers ] .)
    RETURN          reduce using rule 13 (assignment -> VARIABLE = [ numbers ] .)
    $end            reduce using rule 13 (assignment -> VARIABLE = [ numbers ] .)
    }               reduce using rule 13 (assignment -> VARIABLE = [ numbers ] .)


state 54

    (17) numbers -> numbers , . NUMBER

    NUMBER          shift and go to state 71


state 55

    (15) assignment -> VARIABLE [ VARIABLE ] = . VARIABLE
    (16) assignment -> VARIABLE [ VARIABLE ] = . VARIABLE [ VARIABLE ]

    VARIABLE        shift and go to state 72


state 56

    (34) runfunction -> VARIABLE ( VARIABLE , VARIABLE . , expression )
    (27) factor -> VARIABLE .

  ! shift/reduce conflict for , resolved as shift
    ,               shift and go to state 73
    *               reduce using rule 27 (factor -> VARIABLE .)
    /               reduce using rule 27 (factor -> VARIABLE .)
    +               reduce using rule 27 (factor -> VARIABLE .)
    -               reduce using rule 27 (factor -> VARIABLE .)

  ! ,               [ reduce using rule 27 (factor -> VARIABLE .) ]


state 57

    (28) factor -> ( . expression )
    (21) expression -> . expression + term
    (22) expression -> . expression - term
    (23) expression -> . term
    (24) term -> . term * factor
    (25) term -> . term / factor
    (26) term -> . factor
    (27) factor -> . VARIABLE
    (28) factor -> . ( expression )
    (29) factor -> . NUMBER
    (30) factor -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 75
    (               shift and go to state 57
    NUMBER          shift and go to state 76
    LEN             shift and go to state 62

    expression                     shift and go to state 74
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 58

    (35) runfunction -> VARIABLE ( VARIABLE , expression . , VARIABLE )
    (21) expression -> expression . + term
    (22) expression -> expression . - term

    ,               shift and go to state 77
    +               shift and go to state 78
    -               shift and go to state 79


state 59

    (36) runfunction -> VARIABLE ( VARIABLE , NUMBER . , expression )
    (29) factor -> NUMBER .

  ! shift/reduce conflict for , resolved as shift
    ,               shift and go to state 80
    *               reduce using rule 29 (factor -> NUMBER .)
    /               reduce using rule 29 (factor -> NUMBER .)
    +               reduce using rule 29 (factor -> NUMBER .)
    -               reduce using rule 29 (factor -> NUMBER .)

  ! ,               [ reduce using rule 29 (factor -> NUMBER .) ]


state 60

    (23) expression -> term .
    (24) term -> term . * factor
    (25) term -> term . / factor

    ,               reduce using rule 23 (expression -> term .)
    +               reduce using rule 23 (expression -> term .)
    -               reduce using rule 23 (expression -> term .)
    )               reduce using rule 23 (expression -> term .)
    *               shift and go to state 81
    /               shift and go to state 82


state 61

    (26) term -> factor .

    *               reduce using rule 26 (term -> factor .)
    /               reduce using rule 26 (term -> factor .)
    ,               reduce using rule 26 (term -> factor .)
    +               reduce using rule 26 (term -> factor .)
    -               reduce using rule 26 (term -> factor .)
    )               reduce using rule 26 (term -> factor .)


state 62

    (30) factor -> LEN . ( VARIABLE )

    (               shift and go to state 83


state 63

    (32) if -> IF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statements                     shift and go to state 84
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 64

    (38) condition -> VARIABLE MORE VARIABLE .

    )               reduce using rule 38 (condition -> VARIABLE MORE VARIABLE .)
    AND             reduce using rule 38 (condition -> VARIABLE MORE VARIABLE .)


state 65

    (39) condition -> VARIABLE < VARIABLE .

    )               reduce using rule 39 (condition -> VARIABLE < VARIABLE .)
    AND             reduce using rule 39 (condition -> VARIABLE < VARIABLE .)


state 66

    (40) condition -> VARIABLE [ VARIABLE . ] > VARIABLE
    (41) condition -> VARIABLE [ VARIABLE . ] LESS VARIABLE

    ]               shift and go to state 85


state 67

    (42) while -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statements                     shift and go to state 86
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 68

    (43) while -> WHILE ( condition AND condition . ) { statements }

    )               shift and go to state 87


state 69

    (33) function -> DEF VARIABLE ( VARIABLE , . VARIABLE , VARIABLE ) { statements }

    VARIABLE        shift and go to state 88


state 70

    (14) assignment -> VARIABLE = VARIABLE [ VARIABLE ] .

    VARIABLE        reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ VARIABLE ] .)
    PRINT           reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ VARIABLE ] .)
    IF              reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ VARIABLE ] .)
    WHILE           reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ VARIABLE ] .)
    DEF             reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ VARIABLE ] .)
    RETURN          reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ VARIABLE ] .)
    $end            reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ VARIABLE ] .)
    }               reduce using rule 14 (assignment -> VARIABLE = VARIABLE [ VARIABLE ] .)


state 71

    (17) numbers -> numbers , NUMBER .

    ]               reduce using rule 17 (numbers -> numbers , NUMBER .)
    ,               reduce using rule 17 (numbers -> numbers , NUMBER .)


state 72

    (15) assignment -> VARIABLE [ VARIABLE ] = VARIABLE .
    (16) assignment -> VARIABLE [ VARIABLE ] = VARIABLE . [ VARIABLE ]

    VARIABLE        reduce using rule 15 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE .)
    PRINT           reduce using rule 15 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE .)
    IF              reduce using rule 15 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE .)
    WHILE           reduce using rule 15 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE .)
    DEF             reduce using rule 15 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE .)
    RETURN          reduce using rule 15 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE .)
    $end            reduce using rule 15 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE .)
    }               reduce using rule 15 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE .)
    [               shift and go to state 89


state 73

    (34) runfunction -> VARIABLE ( VARIABLE , VARIABLE , . expression )
    (21) expression -> . expression + term
    (22) expression -> . expression - term
    (23) expression -> . term
    (24) term -> . term * factor
    (25) term -> . term / factor
    (26) term -> . factor
    (27) factor -> . VARIABLE
    (28) factor -> . ( expression )
    (29) factor -> . NUMBER
    (30) factor -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 75
    (               shift and go to state 57
    NUMBER          shift and go to state 76
    LEN             shift and go to state 62

    expression                     shift and go to state 90
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 74

    (28) factor -> ( expression . )
    (21) expression -> expression . + term
    (22) expression -> expression . - term

    )               shift and go to state 91
    +               shift and go to state 78
    -               shift and go to state 79


state 75

    (27) factor -> VARIABLE .

    *               reduce using rule 27 (factor -> VARIABLE .)
    /               reduce using rule 27 (factor -> VARIABLE .)
    )               reduce using rule 27 (factor -> VARIABLE .)
    +               reduce using rule 27 (factor -> VARIABLE .)
    -               reduce using rule 27 (factor -> VARIABLE .)
    ,               reduce using rule 27 (factor -> VARIABLE .)


state 76

    (29) factor -> NUMBER .

    *               reduce using rule 29 (factor -> NUMBER .)
    /               reduce using rule 29 (factor -> NUMBER .)
    )               reduce using rule 29 (factor -> NUMBER .)
    +               reduce using rule 29 (factor -> NUMBER .)
    -               reduce using rule 29 (factor -> NUMBER .)
    ,               reduce using rule 29 (factor -> NUMBER .)


state 77

    (35) runfunction -> VARIABLE ( VARIABLE , expression , . VARIABLE )

    VARIABLE        shift and go to state 92


state 78

    (21) expression -> expression + . term
    (24) term -> . term * factor
    (25) term -> . term / factor
    (26) term -> . factor
    (27) factor -> . VARIABLE
    (28) factor -> . ( expression )
    (29) factor -> . NUMBER
    (30) factor -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 75
    (               shift and go to state 57
    NUMBER          shift and go to state 76
    LEN             shift and go to state 62

    term                           shift and go to state 93
    factor                         shift and go to state 61

state 79

    (22) expression -> expression - . term
    (24) term -> . term * factor
    (25) term -> . term / factor
    (26) term -> . factor
    (27) factor -> . VARIABLE
    (28) factor -> . ( expression )
    (29) factor -> . NUMBER
    (30) factor -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 75
    (               shift and go to state 57
    NUMBER          shift and go to state 76
    LEN             shift and go to state 62

    term                           shift and go to state 94
    factor                         shift and go to state 61

state 80

    (36) runfunction -> VARIABLE ( VARIABLE , NUMBER , . expression )
    (21) expression -> . expression + term
    (22) expression -> . expression - term
    (23) expression -> . term
    (24) term -> . term * factor
    (25) term -> . term / factor
    (26) term -> . factor
    (27) factor -> . VARIABLE
    (28) factor -> . ( expression )
    (29) factor -> . NUMBER
    (30) factor -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 75
    (               shift and go to state 57
    NUMBER          shift and go to state 76
    LEN             shift and go to state 62

    expression                     shift and go to state 95
    term                           shift and go to state 60
    factor                         shift and go to state 61

state 81

    (24) term -> term * . factor
    (27) factor -> . VARIABLE
    (28) factor -> . ( expression )
    (29) factor -> . NUMBER
    (30) factor -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 75
    (               shift and go to state 57
    NUMBER          shift and go to state 76
    LEN             shift and go to state 62

    factor                         shift and go to state 96

state 82

    (25) term -> term / . factor
    (27) factor -> . VARIABLE
    (28) factor -> . ( expression )
    (29) factor -> . NUMBER
    (30) factor -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 75
    (               shift and go to state 57
    NUMBER          shift and go to state 76
    LEN             shift and go to state 62

    factor                         shift and go to state 97

state 83

    (30) factor -> LEN ( . VARIABLE )

    VARIABLE        shift and go to state 98


state 84

    (32) if -> IF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    }               shift and go to state 99
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statement                      shift and go to state 18
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 85

    (40) condition -> VARIABLE [ VARIABLE ] . > VARIABLE
    (41) condition -> VARIABLE [ VARIABLE ] . LESS VARIABLE

    >               shift and go to state 100
    LESS            shift and go to state 101


state 86

    (42) while -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    }               shift and go to state 102
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statement                      shift and go to state 18
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 87

    (43) while -> WHILE ( condition AND condition ) . { statements }

    {               shift and go to state 103


state 88

    (33) function -> DEF VARIABLE ( VARIABLE , VARIABLE . , VARIABLE ) { statements }

    ,               shift and go to state 104


state 89

    (16) assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ . VARIABLE ]

    VARIABLE        shift and go to state 105


state 90

    (34) runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression . )
    (21) expression -> expression . + term
    (22) expression -> expression . - term

    )               shift and go to state 106
    +               shift and go to state 78
    -               shift and go to state 79


state 91

    (28) factor -> ( expression ) .

    *               reduce using rule 28 (factor -> ( expression ) .)
    /               reduce using rule 28 (factor -> ( expression ) .)
    ,               reduce using rule 28 (factor -> ( expression ) .)
    +               reduce using rule 28 (factor -> ( expression ) .)
    -               reduce using rule 28 (factor -> ( expression ) .)
    )               reduce using rule 28 (factor -> ( expression ) .)


state 92

    (35) runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE . )

    )               shift and go to state 107


state 93

    (21) expression -> expression + term .
    (24) term -> term . * factor
    (25) term -> term . / factor

    ,               reduce using rule 21 (expression -> expression + term .)
    +               reduce using rule 21 (expression -> expression + term .)
    -               reduce using rule 21 (expression -> expression + term .)
    )               reduce using rule 21 (expression -> expression + term .)
    *               shift and go to state 81
    /               shift and go to state 82


state 94

    (22) expression -> expression - term .
    (24) term -> term . * factor
    (25) term -> term . / factor

    ,               reduce using rule 22 (expression -> expression - term .)
    +               reduce using rule 22 (expression -> expression - term .)
    -               reduce using rule 22 (expression -> expression - term .)
    )               reduce using rule 22 (expression -> expression - term .)
    *               shift and go to state 81
    /               shift and go to state 82


state 95

    (36) runfunction -> VARIABLE ( VARIABLE , NUMBER , expression . )
    (21) expression -> expression . + term
    (22) expression -> expression . - term

    )               shift and go to state 108
    +               shift and go to state 78
    -               shift and go to state 79


state 96

    (24) term -> term * factor .

    *               reduce using rule 24 (term -> term * factor .)
    /               reduce using rule 24 (term -> term * factor .)
    ,               reduce using rule 24 (term -> term * factor .)
    +               reduce using rule 24 (term -> term * factor .)
    -               reduce using rule 24 (term -> term * factor .)
    )               reduce using rule 24 (term -> term * factor .)


state 97

    (25) term -> term / factor .

    *               reduce using rule 25 (term -> term / factor .)
    /               reduce using rule 25 (term -> term / factor .)
    ,               reduce using rule 25 (term -> term / factor .)
    +               reduce using rule 25 (term -> term / factor .)
    -               reduce using rule 25 (term -> term / factor .)
    )               reduce using rule 25 (term -> term / factor .)


state 98

    (30) factor -> LEN ( VARIABLE . )

    )               shift and go to state 109


state 99

    (32) if -> IF ( condition ) { statements } .

    VARIABLE        reduce using rule 32 (if -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 32 (if -> IF ( condition ) { statements } .)
    IF              reduce using rule 32 (if -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 32 (if -> IF ( condition ) { statements } .)
    DEF             reduce using rule 32 (if -> IF ( condition ) { statements } .)
    RETURN          reduce using rule 32 (if -> IF ( condition ) { statements } .)
    $end            reduce using rule 32 (if -> IF ( condition ) { statements } .)
    }               reduce using rule 32 (if -> IF ( condition ) { statements } .)


state 100

    (40) condition -> VARIABLE [ VARIABLE ] > . VARIABLE

    VARIABLE        shift and go to state 110


state 101

    (41) condition -> VARIABLE [ VARIABLE ] LESS . VARIABLE

    VARIABLE        shift and go to state 111


state 102

    (42) while -> WHILE ( condition ) { statements } .

    VARIABLE        reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    DEF             reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    RETURN          reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 42 (while -> WHILE ( condition ) { statements } .)
    }               reduce using rule 42 (while -> WHILE ( condition ) { statements } .)


state 103

    (43) while -> WHILE ( condition AND condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statements                     shift and go to state 112
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 104

    (33) function -> DEF VARIABLE ( VARIABLE , VARIABLE , . VARIABLE ) { statements }

    VARIABLE        shift and go to state 113


state 105

    (16) assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE . ]

    ]               shift and go to state 114


state 106

    (34) runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .

    VARIABLE        reduce using rule 34 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .)
    PRINT           reduce using rule 34 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .)
    IF              reduce using rule 34 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .)
    WHILE           reduce using rule 34 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .)
    DEF             reduce using rule 34 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .)
    RETURN          reduce using rule 34 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .)
    $end            reduce using rule 34 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .)
    }               reduce using rule 34 (runfunction -> VARIABLE ( VARIABLE , VARIABLE , expression ) .)


state 107

    (35) runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .

    VARIABLE        reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .)
    PRINT           reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .)
    IF              reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .)
    WHILE           reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .)
    DEF             reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .)
    RETURN          reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .)
    $end            reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .)
    }               reduce using rule 35 (runfunction -> VARIABLE ( VARIABLE , expression , VARIABLE ) .)


state 108

    (36) runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .

    VARIABLE        reduce using rule 36 (runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .)
    PRINT           reduce using rule 36 (runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .)
    IF              reduce using rule 36 (runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .)
    WHILE           reduce using rule 36 (runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .)
    DEF             reduce using rule 36 (runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .)
    RETURN          reduce using rule 36 (runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .)
    $end            reduce using rule 36 (runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .)
    }               reduce using rule 36 (runfunction -> VARIABLE ( VARIABLE , NUMBER , expression ) .)


state 109

    (30) factor -> LEN ( VARIABLE ) .

    *               reduce using rule 30 (factor -> LEN ( VARIABLE ) .)
    /               reduce using rule 30 (factor -> LEN ( VARIABLE ) .)
    ,               reduce using rule 30 (factor -> LEN ( VARIABLE ) .)
    +               reduce using rule 30 (factor -> LEN ( VARIABLE ) .)
    -               reduce using rule 30 (factor -> LEN ( VARIABLE ) .)
    )               reduce using rule 30 (factor -> LEN ( VARIABLE ) .)


state 110

    (40) condition -> VARIABLE [ VARIABLE ] > VARIABLE .

    )               reduce using rule 40 (condition -> VARIABLE [ VARIABLE ] > VARIABLE .)
    AND             reduce using rule 40 (condition -> VARIABLE [ VARIABLE ] > VARIABLE .)


state 111

    (41) condition -> VARIABLE [ VARIABLE ] LESS VARIABLE .

    )               reduce using rule 41 (condition -> VARIABLE [ VARIABLE ] LESS VARIABLE .)
    AND             reduce using rule 41 (condition -> VARIABLE [ VARIABLE ] LESS VARIABLE .)


state 112

    (43) while -> WHILE ( condition AND condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    }               shift and go to state 115
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statement                      shift and go to state 18
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 113

    (33) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE . ) { statements }

    )               shift and go to state 116


state 114

    (16) assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .

    VARIABLE        reduce using rule 16 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .)
    PRINT           reduce using rule 16 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .)
    IF              reduce using rule 16 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .)
    WHILE           reduce using rule 16 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .)
    DEF             reduce using rule 16 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .)
    RETURN          reduce using rule 16 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .)
    $end            reduce using rule 16 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .)
    }               reduce using rule 16 (assignment -> VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ] .)


state 115

    (43) while -> WHILE ( condition AND condition ) { statements } .

    VARIABLE        reduce using rule 43 (while -> WHILE ( condition AND condition ) { statements } .)
    PRINT           reduce using rule 43 (while -> WHILE ( condition AND condition ) { statements } .)
    IF              reduce using rule 43 (while -> WHILE ( condition AND condition ) { statements } .)
    WHILE           reduce using rule 43 (while -> WHILE ( condition AND condition ) { statements } .)
    DEF             reduce using rule 43 (while -> WHILE ( condition AND condition ) { statements } .)
    RETURN          reduce using rule 43 (while -> WHILE ( condition AND condition ) { statements } .)
    $end            reduce using rule 43 (while -> WHILE ( condition AND condition ) { statements } .)
    }               reduce using rule 43 (while -> WHILE ( condition AND condition ) { statements } .)


state 116

    (33) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) . { statements }

    {               shift and go to state 117


state 117

    (33) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statements                     shift and go to state 118
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 118

    (33) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) statement -> . function
    (10) statement -> . runfunction
    (11) statement -> . return
    (12) assignment -> . VARIABLE = VARIABLE
    (13) assignment -> . VARIABLE = [ numbers ]
    (14) assignment -> . VARIABLE = VARIABLE [ VARIABLE ]
    (15) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE
    (16) assignment -> . VARIABLE [ VARIABLE ] = VARIABLE [ VARIABLE ]
    (19) operation -> . VARIABLE PLUSEQUAL NUMBER
    (20) operation -> . VARIABLE MINEQUAL NUMBER
    (31) print -> . PRINT ( VARIABLE )
    (32) if -> . IF ( condition ) { statements }
    (42) while -> . WHILE ( condition ) { statements }
    (43) while -> . WHILE ( condition AND condition ) { statements }
    (33) function -> . DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements }
    (34) runfunction -> . VARIABLE ( VARIABLE , VARIABLE , expression )
    (35) runfunction -> . VARIABLE ( VARIABLE , expression , VARIABLE )
    (36) runfunction -> . VARIABLE ( VARIABLE , NUMBER , expression )
    (37) return -> . RETURN

    }               shift and go to state 119
    VARIABLE        shift and go to state 12
    PRINT           shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 15
    DEF             shift and go to state 16
    RETURN          shift and go to state 17

    statement                      shift and go to state 18
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8
    function                       shift and go to state 9
    runfunction                    shift and go to state 10
    return                         shift and go to state 11

state 119

    (33) function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .

    VARIABLE        reduce using rule 33 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    PRINT           reduce using rule 33 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    IF              reduce using rule 33 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    WHILE           reduce using rule 33 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    DEF             reduce using rule 33 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    RETURN          reduce using rule 33 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    $end            reduce using rule 33 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)
    }               reduce using rule 33 (function -> DEF VARIABLE ( VARIABLE , VARIABLE , VARIABLE ) { statements } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for , in state 56 resolved as shift
WARNING: shift/reduce conflict for , in state 59 resolved as shift
