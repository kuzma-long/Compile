Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     assignment -> VARIABLE = NUMBER
Rule 8     operation -> VARIABLE = expression
Rule 9     expression -> expression + term
Rule 10    expression -> expression - term
Rule 11    expression -> term
Rule 12    term -> term * factor
Rule 13    term -> term / factor
Rule 14    term -> factor
Rule 15    factor -> VARIABLE
Rule 16    factor -> ( expression )
Rule 17    factor -> NUMBER
Rule 18    variables -> variables , VARIABLE
Rule 19    variables -> VARIABLE
Rule 20    print -> PRINT ( variables )

Terminals, with rules where they appear

(                    : 16 20
)                    : 16 20
*                    : 12
+                    : 9
,                    : 18
-                    : 10
/                    : 13
=                    : 7 8
NUMBER               : 7 17
PRINT                : 20
VARIABLE             : 7 8 15 18 19
error                : 

Nonterminals, with rules where they appear

assignment           : 4
expression           : 8 9 10 16
factor               : 12 13 14
operation            : 5
print                : 6
program              : 0
statement            : 2 3
statements           : 1 2
term                 : 9 10 11 12 13
variables            : 18 20

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) assignment -> . VARIABLE = NUMBER
    (8) operation -> . VARIABLE = expression
    (20) print -> . PRINT ( variables )

    VARIABLE        shift and go to state 7
    PRINT           shift and go to state 8

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) assignment -> . VARIABLE = NUMBER
    (8) operation -> . VARIABLE = expression
    (20) print -> . PRINT ( variables )

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 7
    PRINT           shift and go to state 8

    statement                      shift and go to state 9
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)


state 6

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)


state 7

    (7) assignment -> VARIABLE . = NUMBER
    (8) operation -> VARIABLE . = expression

    =               shift and go to state 10


state 8

    (20) print -> PRINT . ( variables )

    (               shift and go to state 11


state 9

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)


state 10

    (7) assignment -> VARIABLE = . NUMBER
    (8) operation -> VARIABLE = . expression
    (9) expression -> . expression + term
    (10) expression -> . expression - term
    (11) expression -> . term
    (12) term -> . term * factor
    (13) term -> . term / factor
    (14) term -> . factor
    (15) factor -> . VARIABLE
    (16) factor -> . ( expression )
    (17) factor -> . NUMBER

    NUMBER          shift and go to state 13
    VARIABLE        shift and go to state 12
    (               shift and go to state 17

    expression                     shift and go to state 14
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 11

    (20) print -> PRINT ( . variables )
    (18) variables -> . variables , VARIABLE
    (19) variables -> . VARIABLE

    VARIABLE        shift and go to state 19

    variables                      shift and go to state 18

state 12

    (15) factor -> VARIABLE .

    *               reduce using rule 15 (factor -> VARIABLE .)
    /               reduce using rule 15 (factor -> VARIABLE .)
    +               reduce using rule 15 (factor -> VARIABLE .)
    -               reduce using rule 15 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 15 (factor -> VARIABLE .)
    PRINT           reduce using rule 15 (factor -> VARIABLE .)
    $end            reduce using rule 15 (factor -> VARIABLE .)
    )               reduce using rule 15 (factor -> VARIABLE .)


state 13

    (7) assignment -> VARIABLE = NUMBER .
    (17) factor -> NUMBER .

  ! reduce/reduce conflict for VARIABLE resolved using rule 7 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for PRINT resolved using rule 7 (assignment -> VARIABLE = NUMBER .)
  ! reduce/reduce conflict for $end resolved using rule 7 (assignment -> VARIABLE = NUMBER .)
    VARIABLE        reduce using rule 7 (assignment -> VARIABLE = NUMBER .)
    PRINT           reduce using rule 7 (assignment -> VARIABLE = NUMBER .)
    $end            reduce using rule 7 (assignment -> VARIABLE = NUMBER .)
    *               reduce using rule 17 (factor -> NUMBER .)
    /               reduce using rule 17 (factor -> NUMBER .)
    +               reduce using rule 17 (factor -> NUMBER .)
    -               reduce using rule 17 (factor -> NUMBER .)

  ! VARIABLE        [ reduce using rule 17 (factor -> NUMBER .) ]
  ! PRINT           [ reduce using rule 17 (factor -> NUMBER .) ]
  ! $end            [ reduce using rule 17 (factor -> NUMBER .) ]


state 14

    (8) operation -> VARIABLE = expression .
    (9) expression -> expression . + term
    (10) expression -> expression . - term

    VARIABLE        reduce using rule 8 (operation -> VARIABLE = expression .)
    PRINT           reduce using rule 8 (operation -> VARIABLE = expression .)
    $end            reduce using rule 8 (operation -> VARIABLE = expression .)
    +               shift and go to state 20
    -               shift and go to state 21


state 15

    (11) expression -> term .
    (12) term -> term . * factor
    (13) term -> term . / factor

    +               reduce using rule 11 (expression -> term .)
    -               reduce using rule 11 (expression -> term .)
    VARIABLE        reduce using rule 11 (expression -> term .)
    PRINT           reduce using rule 11 (expression -> term .)
    $end            reduce using rule 11 (expression -> term .)
    )               reduce using rule 11 (expression -> term .)
    *               shift and go to state 22
    /               shift and go to state 23


state 16

    (14) term -> factor .

    *               reduce using rule 14 (term -> factor .)
    /               reduce using rule 14 (term -> factor .)
    +               reduce using rule 14 (term -> factor .)
    -               reduce using rule 14 (term -> factor .)
    VARIABLE        reduce using rule 14 (term -> factor .)
    PRINT           reduce using rule 14 (term -> factor .)
    $end            reduce using rule 14 (term -> factor .)
    )               reduce using rule 14 (term -> factor .)


state 17

    (16) factor -> ( . expression )
    (9) expression -> . expression + term
    (10) expression -> . expression - term
    (11) expression -> . term
    (12) term -> . term * factor
    (13) term -> . term / factor
    (14) term -> . factor
    (15) factor -> . VARIABLE
    (16) factor -> . ( expression )
    (17) factor -> . NUMBER

    VARIABLE        shift and go to state 12
    (               shift and go to state 17
    NUMBER          shift and go to state 25

    expression                     shift and go to state 24
    term                           shift and go to state 15
    factor                         shift and go to state 16

state 18

    (20) print -> PRINT ( variables . )
    (18) variables -> variables . , VARIABLE

    )               shift and go to state 26
    ,               shift and go to state 27


state 19

    (19) variables -> VARIABLE .

    )               reduce using rule 19 (variables -> VARIABLE .)
    ,               reduce using rule 19 (variables -> VARIABLE .)


state 20

    (9) expression -> expression + . term
    (12) term -> . term * factor
    (13) term -> . term / factor
    (14) term -> . factor
    (15) factor -> . VARIABLE
    (16) factor -> . ( expression )
    (17) factor -> . NUMBER

    VARIABLE        shift and go to state 12
    (               shift and go to state 17
    NUMBER          shift and go to state 25

    term                           shift and go to state 28
    factor                         shift and go to state 16

state 21

    (10) expression -> expression - . term
    (12) term -> . term * factor
    (13) term -> . term / factor
    (14) term -> . factor
    (15) factor -> . VARIABLE
    (16) factor -> . ( expression )
    (17) factor -> . NUMBER

    VARIABLE        shift and go to state 12
    (               shift and go to state 17
    NUMBER          shift and go to state 25

    term                           shift and go to state 29
    factor                         shift and go to state 16

state 22

    (12) term -> term * . factor
    (15) factor -> . VARIABLE
    (16) factor -> . ( expression )
    (17) factor -> . NUMBER

    VARIABLE        shift and go to state 12
    (               shift and go to state 17
    NUMBER          shift and go to state 25

    factor                         shift and go to state 30

state 23

    (13) term -> term / . factor
    (15) factor -> . VARIABLE
    (16) factor -> . ( expression )
    (17) factor -> . NUMBER

    VARIABLE        shift and go to state 12
    (               shift and go to state 17
    NUMBER          shift and go to state 25

    factor                         shift and go to state 31

state 24

    (16) factor -> ( expression . )
    (9) expression -> expression . + term
    (10) expression -> expression . - term

    )               shift and go to state 32
    +               shift and go to state 20
    -               shift and go to state 21


state 25

    (17) factor -> NUMBER .

    *               reduce using rule 17 (factor -> NUMBER .)
    /               reduce using rule 17 (factor -> NUMBER .)
    )               reduce using rule 17 (factor -> NUMBER .)
    +               reduce using rule 17 (factor -> NUMBER .)
    -               reduce using rule 17 (factor -> NUMBER .)
    VARIABLE        reduce using rule 17 (factor -> NUMBER .)
    PRINT           reduce using rule 17 (factor -> NUMBER .)
    $end            reduce using rule 17 (factor -> NUMBER .)


state 26

    (20) print -> PRINT ( variables ) .

    VARIABLE        reduce using rule 20 (print -> PRINT ( variables ) .)
    PRINT           reduce using rule 20 (print -> PRINT ( variables ) .)
    $end            reduce using rule 20 (print -> PRINT ( variables ) .)


state 27

    (18) variables -> variables , . VARIABLE

    VARIABLE        shift and go to state 33


state 28

    (9) expression -> expression + term .
    (12) term -> term . * factor
    (13) term -> term . / factor

    +               reduce using rule 9 (expression -> expression + term .)
    -               reduce using rule 9 (expression -> expression + term .)
    VARIABLE        reduce using rule 9 (expression -> expression + term .)
    PRINT           reduce using rule 9 (expression -> expression + term .)
    $end            reduce using rule 9 (expression -> expression + term .)
    )               reduce using rule 9 (expression -> expression + term .)
    *               shift and go to state 22
    /               shift and go to state 23


state 29

    (10) expression -> expression - term .
    (12) term -> term . * factor
    (13) term -> term . / factor

    +               reduce using rule 10 (expression -> expression - term .)
    -               reduce using rule 10 (expression -> expression - term .)
    VARIABLE        reduce using rule 10 (expression -> expression - term .)
    PRINT           reduce using rule 10 (expression -> expression - term .)
    $end            reduce using rule 10 (expression -> expression - term .)
    )               reduce using rule 10 (expression -> expression - term .)
    *               shift and go to state 22
    /               shift and go to state 23


state 30

    (12) term -> term * factor .

    *               reduce using rule 12 (term -> term * factor .)
    /               reduce using rule 12 (term -> term * factor .)
    +               reduce using rule 12 (term -> term * factor .)
    -               reduce using rule 12 (term -> term * factor .)
    VARIABLE        reduce using rule 12 (term -> term * factor .)
    PRINT           reduce using rule 12 (term -> term * factor .)
    $end            reduce using rule 12 (term -> term * factor .)
    )               reduce using rule 12 (term -> term * factor .)


state 31

    (13) term -> term / factor .

    *               reduce using rule 13 (term -> term / factor .)
    /               reduce using rule 13 (term -> term / factor .)
    +               reduce using rule 13 (term -> term / factor .)
    -               reduce using rule 13 (term -> term / factor .)
    VARIABLE        reduce using rule 13 (term -> term / factor .)
    PRINT           reduce using rule 13 (term -> term / factor .)
    $end            reduce using rule 13 (term -> term / factor .)
    )               reduce using rule 13 (term -> term / factor .)


state 32

    (16) factor -> ( expression ) .

    *               reduce using rule 16 (factor -> ( expression ) .)
    /               reduce using rule 16 (factor -> ( expression ) .)
    +               reduce using rule 16 (factor -> ( expression ) .)
    -               reduce using rule 16 (factor -> ( expression ) .)
    VARIABLE        reduce using rule 16 (factor -> ( expression ) .)
    PRINT           reduce using rule 16 (factor -> ( expression ) .)
    $end            reduce using rule 16 (factor -> ( expression ) .)
    )               reduce using rule 16 (factor -> ( expression ) .)


state 33

    (18) variables -> variables , VARIABLE .

    )               reduce using rule 18 (variables -> variables , VARIABLE .)
    ,               reduce using rule 18 (variables -> variables , VARIABLE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 13 resolved using rule (assignment -> VARIABLE = NUMBER)
WARNING: rejected rule (factor -> NUMBER) in state 13
